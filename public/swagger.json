{
  "openapi": "3.0.3",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-comcheck-token"
      }
    },
    "schemas": {
      "Inspector": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Inspector ID"
          },
          "name": {
            "type": "string",
            "description": "Inspector name"
          },
          "check_id": {
            "type": "string",
            "format": "uuid",
            "description": "Check ID"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Inspector created datetime"
          }
        }
      },
      "Material": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Check ID"
          },
          "content": {
            "type": "string",
            "description": "Material content"
          }
        }
      },
      "Check": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Check ID"
          },
          "name": {
            "type": "string",
            "description": "Check name"
          },
          "material_link": {
            "type": "string",
            "description": "Check material link"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Check start datetime"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "description": "Check finish datetime"
          }
        }
      },
      "CheckUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Check name",
            "example": "Community Check"
          },
          "material_link": {
            "type": "string",
            "description": "Check material link",
            "example": "https://git.door43.org/ru_gl/ru_rlob/raw/branch/master/57-TIT.usfm"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Check start datetime",
            "example": "2024-04-04"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "description": "Check finish datetime",
            "example": "2025-05-05"
          }
        }
      },
      "Book": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Book identifier"
          },
          "name": {
            "type": "string",
            "description": "Book name"
          },
          "project_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "info": {
    "description": "This documentation describes the Community Check API.",
    "title": "ComCheck API.",
    "license": {
      "name": "MIT",
      "url": "http: //opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/api/projects/{projectId}/books/{bookId}/checks/{checkId}/inspector": {
      "get": {
        "summary": "Returns the list of inspectors for the check",
        "tags": [
          "Inspector"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "checkId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the check"
          }
        ],
        "responses": {
          "200": {
            "description": "List of inspectors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Inspector"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "summary": "Creates a new inspector",
        "tags": [
          "Inspector"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "checkId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The ID of the check"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the inspector"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inspector created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Inspector"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "summary": "Deletes an inspector and its notes",
        "tags": [
          "Inspector"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "checkId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The ID of the check"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "delete_all_notes": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "id",
                  "delete_all_notes"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inspector deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/projects/{projectId}/books/{bookId}/checks/{checkId}/material": {
      "get": {
        "summary": "Get material by check id",
        "tags": [
          "Material"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          },
          {
            "in": "path",
            "name": "bookId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Book ID"
          },
          {
            "in": "path",
            "name": "checkId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Check ID"
          }
        ],
        "responses": {
          "200": {
            "description": "The material",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Material"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "summary": "Create or update material",
        "tags": [
          "Material"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          },
          {
            "in": "path",
            "name": "bookId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Book ID"
          },
          {
            "in": "path",
            "name": "checkId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Check ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "Material content"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The material",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Material"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/projects/{projectId}/books/{bookId}/checks/{checkId}": {
      "get": {
        "summary": "Get check by ID",
        "tags": [
          "Checks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Project ID"
          },
          {
            "in": "path",
            "name": "bookId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Book ID"
          },
          {
            "in": "path",
            "name": "checkId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Check ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Check",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Check"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Update check",
        "tags": [
          "Checks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Project ID"
          },
          {
            "in": "path",
            "name": "bookId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Book ID"
          },
          {
            "in": "path",
            "name": "checkId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Check ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Check",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Check"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/projects/{projectId}/books/{bookId}/checks": {
      "get": {
        "summary": "Returns a list of checks for a book",
        "tags": [
          "Checks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the project"
          },
          {
            "in": "path",
            "name": "bookId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the book"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Check"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Creates a new check for a book",
        "tags": [
          "Checks"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the check",
                    "example": "Community Check"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the project"
          },
          {
            "in": "path",
            "name": "bookId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the book"
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Check"
                }
              }
            }
          },
          "400": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/projects/{projectId}/books/{bookId}": {
      "get": {
        "summary": "Get a book by ID",
        "tags": [
          "Books"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "description": "Project identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "bookId",
            "description": "Book identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "summary": "Update book name",
        "tags": [
          "Books"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "description": "Project identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "bookId",
            "description": "Book identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "New book name",
                    "example": "Book name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/projects/{projectId}/books": {
      "get": {
        "summary": "Get books",
        "description": "Get books",
        "tags": [
          "Books"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of books",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User is not authorized"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      },
      "post": {
        "summary": "Create a new book",
        "description": "Create a new book",
        "tags": [
          "Books"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the book",
                    "example": "Titus"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Book created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User is not authorized"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      }
    },
    "/api/projects/{projectId}": {
      "get": {
        "summary": "Returns a project by ID.",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "401": {
            "description": "User is not authorized"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      },
      "post": {
        "summary": "Updates the project name.",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "New project name",
                    "example": "RSOB"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Error in request"
          },
          "401": {
            "description": "User is not authorized"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Inspector",
      "description": "Inspector operations"
    },
    {
      "name": "Material",
      "description": "Material operations"
    },
    {
      "name": "Checks",
      "description": "Checks operations"
    },
    {
      "name": "Books",
      "description": "Operations about books"
    },
    "Books"
  ]
}